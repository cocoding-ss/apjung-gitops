import groovy.json.JsonOutput

pipeline {
    agent any
    triggers {
        GenericTrigger (
            genericVariables: [
                [key: 'action', value: '$.action'],
                [key: 'branch', value: '$.pull_request.head.ref' ],
                [key: 'PULL_REQUEST_NO', value: '$.pull_request.number']
            ],

            causeString: 'Triggered on $branch',
            token: 'kucby7dvrbjyh7yna25mchaqzzkj98zh3em0jkre',

            printContributedVariables: false,
            printPostContent: false,

            silentResponse: false,

            regexpFilterText: '$action',
            regexpFilterExpression: 'opened|reopened'
        )
    }
    stages {
        stage('Git checkout') {
            steps {
                git branch: "$branch",
                    credentialsId: 'apjung-backend',
                    url: 'git@github.com:cocoding-ss/apjung-backend.git'
            }
        }
        stage('Gradle build') {
            steps {
                script {
                    def BUILD_LOG = sh (
                            script: "./gradlew clean build -Pprofile=dev",
                            returnStdout: true
                    ).trim()

                    def data = [
                            event: "COMMENT",
                            body: BUILD_LOG
                    ]

                    def myJsonData = JsonOutput.toJson(data)

                    COMMENT_DATA = myJsonData
                }
            }
        }
    }
    post {
        success {
            withCredentials([string(credentialsId: 'github-api-token', variable: 'TOKEN')]) {
                sh "curl -X POST https://api.github.com/repos/cocoding-ss/apjung-backend/pulls/$PULL_REQUEST_NO/reviews -H 'Accept:application/vnd.github.v3+json' -H 'Authorization: token $TOKEN' -H 'Content-Type: application/json' --data-raw '$COMMENT_DATA'"
            }
        }
    }
}

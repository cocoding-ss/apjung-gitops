import groovy.json.JsonOutput
import jdk.jfr.ContentType

pipeline {
    agent {
        label 'apjung-backend-branch-test-agent'
    }
    stages {
        stage('Git checkout') {

            steps {
                git branch: "${ghprbSourceBranch}",
                    credentialsId: 'apjung-backend',
                    url: 'git@github.com:cocoding-ss/apjung-backend.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {

                    withSonarQubeEnv() {
                        withCredentials([string(credentialsId: 'github-api-token', variable: 'GITHUB_TOKEN')]) {
                            sh (
                                script: """#!/bin/bash
                                    ./gradlew -Pprofile=test -Dfile.encoding=UTF-8 test sonarqube --stacktrace \
                                      -Dsonar.projectKey=apjung:backend \
                                      -Dsonar.host.url=${SONAR_HOST_URL} \
                                      -Dsonar.login=${SONAR_AUTH_TOKEN}
                                """
                            )
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend (channel: '#apjung-log', color: '#00FF00', message: """:white_check_mark: 성공 : ${ghprbSourceBranch} 브랜치 테스트
파이프라인 : ${env.JOB_NAME} [${env.BUILD_NUMBER}]
확인 : (${env.BUILD_URL})""")
        }
        failure {
            slackSend (channel: '#apjung-log', color: '#00FF00', message: """:octagonal_sign: 실패 : ${ghprbSourceBranch} 브랜치 테스트
파이프라인 : ${env.JOB_NAME} [${env.BUILD_NUMBER}]
확인 : (${env.BUILD_URL})""")
        }
    }
}
